---
## from https://github.com/geerlingguy/ansible-role-apache/blob/master/.travis.yml
sudo: required

env:
  init: /usr/lib/systemd/systemd
  run_opts: "'--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro'"
  suite: default

jobs:
  include:
    - env: distribution=centos version=8
    - env: distribution=centos version=7
    - env: distribution=centos version=6 init=/sbin/init run_opts=""
    - env: distribution=ubuntu version=20.04
    - env: distribution=ubuntu version=18.04
    - env: distribution=ubuntu version=16.04
    - env: distribution=alpine version="3.10" init=/sbin/init run_opts=""
      if: branch =~ /^devel*/
    - env: distribution=centos version=8 suite=full
    - env: distribution=ubuntu version=18.04 suite=full
    - env: distribution=ubuntu version=18.04 suite=default-gpg

services:
  - docker

before_install:
  # - sudo apt-get update
  # Pull container
  - 'sudo docker pull ${distribution}:${version}'
  - env
  - pwd
  - find -ls
  - "[ -f get-dependencies.sh ] && sh -x get-dependencies.sh"
  - cp test/travis/initctl_faker test/
  # Customize container
  - 'sudo docker build --rm=true --file=test/travis/Dockerfile.${distribution}-${version} --tag=${distribution}-${version}:ansible test'

script:
  - container_id=$(mktemp)
    # Run container in detached state
  - 'sudo docker run --detach --volume="${PWD%/*}":/etc/ansible/roles:ro ${run_opts} ${distribution}-${version}:ansible "${init}" > "${container_id}"'

  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible --version'

  # Ansible syntax check.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/juju4.syslogclient/test/integration/${suite}/default.yml --syntax-check'

  # Test role.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/juju4.syslogclient/test/integration/${suite}/default.yml'

  # Test role idempotence.
  - >
    sudo docker exec "$(cat ${container_id})" ansible-playbook /etc/ansible/roles/juju4.syslogclient/test/integration/${suite}/default.yml
    | tee /tmp/idempotency.log
    | grep -q 'changed=0.*failed=0'
    && (echo 'Idempotence test: pass' && exit 0)
    || (echo 'Idempotence test: fail' && cat /tmp/idempotency.log && exit 1)

after_failure:
  - 'sudo docker exec --tty "$(cat ${container_id})" ps auxw'
  - '[ "X${distribution}" == "Xalpine" ] && sudo docker exec --tty "$(cat ${container_id})"  rc-status"'
  - 'sudo docker exec --tty "$(cat ${container_id})" ansible -i inventory --connection=local -m setup localhost'

after_script:
  - 'sudo docker exec --tty "$(cat ${container_id})" rsyslogd -v'
  - 'sudo docker exec --tty "$(cat ${container_id})" cat /etc/rsyslog.conf'
  - 'sudo docker exec --tty "$(cat ${container_id})" find /etc/rsyslog.d -type f -exec cat {} \;'
  - 'sudo docker exec --tty "$(cat ${container_id})" cat /etc/logrotate.conf'
  - 'sudo docker exec --tty "$(cat ${container_id})" find /etc/logrotate.d -type f -exec cat {} \;'
  - 'sudo docker exec --tty "$(cat ${container_id})" gpg2 --list-keys'
  - 'sudo docker exec --tty "$(cat ${container_id})" cat /root/root-fingerprint'
  - 'sudo docker exec --tty "$(cat ${container_id})" cat /root/root.pub'
  - 'sudo docker exec --tty "$(cat ${container_id})" ls -laR /var/log/'
  - 'sudo docker exec --tty "$(cat ${container_id})" logrotate -vf /etc/logrotate.conf'
  - 'sudo docker exec --tty "$(cat ${container_id})" ls -laR /var/log/'
  # Clean up
  - 'sudo docker stop "$(cat ${container_id})"'

notifications:
  webhooks: https://galaxy.ansible.com/api/v1/notifications/
